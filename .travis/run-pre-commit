#!/usr/bin/env bash

echo "${TRAVIS_COMMIT_RANGE}"
if [ -z "${TRAVIS_COMMIT_RANGE}" ] ; then
    # This is a new branch.
    echo "Nothing to do"
    git show --name-only --pretty=format: -z | xargs -0 pre-commit run --verbose --files
else
    # This isn't a new branch.
    if [ "${TRAVIS_PULL_REQUEST}" = "false" ] ; then
        # This isn't a PR build.

        # We need the individual commits to detect force pushes.
        COMMIT1="$(echo "${TRAVIS_COMMIT_RANGE}" | cut -f 1 -d '.')"
        COMMIT2="$(echo "${TRAVIS_COMMIT_RANGE}" | cut -f 4 -d '.')"
        echo "${COMMIT1}"
        echo "${COMMIT2}"

        if [ "$(git cat-file -t "${COMMIT1}" 2>/dev/null)" = commit ] && \
           [ "$(git cat-file -t "${COMMIT2}" 2>/dev/null)" = commit ] ; then
            # This is a 'normal' build.
            echo "Checking commits:"
            git log --format=oneline --abbrev-commit "${COMMIT1}".."${COMMIT2}" --
            git diff --name-only "${COMMIT1}".."${COMMIT2}" --
            pre-commit run --verbose --from-ref "${COMMIT1}" --to-ref "${COMMIT2}"
        else
            # This was a history rewrite.
            git cat-file -t "${COMMIT1}"
            git cat-file -t "${COMMIT2}"
            echo "Not sure what to do"
            git show --name-only --pretty=format: -z | xargs -0 pre-commit run --verbose --files
        fi
    else
        # This is a PR build.
        echo "${TRAVIS_PULL_REQUEST_BRANCH}"
        echo "${TRAVIS_PULL_REQUEST_SHA}"
        echo "${TRAVIS_COMMIT}"
        echo "Checking commits:"
#        git checkout -qf "${TRAVIS_PULL_REQUEST_BRANCH}"
        git log --format=oneline --abbrev-commit "${TRAVIS_COMMIT_RANGE/.../..}" --
        git diff --name-only "${TRAVIS_COMMIT_RANGE}"
        CHANGED_FILES="$(git diff --name-only "${TRAVIS_COMMIT_RANGE}" --)"
        echo "${CHANGED_FILES}"
        git diff --name-only -z "${TRAVIS_COMMIT_RANGE}" -- | xargs -0 pre-commit run --verbose --files
    fi
fi
